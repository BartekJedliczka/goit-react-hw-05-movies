{"version":3,"file":"static/js/881.1498b066.chunk.js","mappings":"8MAEaA,EAAU,mCAAG,WAAOC,EAAMC,EAAOC,GAApB,uFACDC,EAAAA,EAAAA,IAAA,uCAA0CH,GAAQ,CACvEI,OAAQ,MACRC,OAAQ,CACNC,QAAS,mCACTL,MAAOA,EACPC,KAAMA,KANc,cAClBK,EADkB,yBAUjBA,EAASC,MAVQ,2CAAH,yD,2ECDvB,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAuF,wBAAvF,EAAsH,wB,SCqCtH,EAlCkB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,gCACGF,IAAa,eAAIG,UAAWC,EAAf,SAA6BJ,KAC3C,eAAIG,UAAWC,EAAf,SACGL,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACV,eAAaL,UAAWC,EAAxB,UACE,SAAC,KAAD,CACEK,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMV,GACfE,UAAWC,EAHb,SAKGG,GAASC,KANLF,EADC,QAcnB,C,4HCxBD,GAAgB,KAAO,qBAAqB,MAAQ,sBAAsB,OAAS,uBAAuB,OAAS,wB,SC8DnH,EAxDe,WAAO,IAAD,EACnB,GAAwCM,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMvB,EAAK,UAAGsB,EAAaE,IAAI,gBAApB,QAAgC,GAE3C,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOjB,EAAP,KAAekB,EAAf,KACA,GAAoCD,EAAAA,EAAAA,UAAS,MAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KACA,GAAsCH,EAAAA,EAAAA,WAAS,GAA/C,eAAOI,EAAP,KAAoBC,EAApB,KACA,GAAsCL,EAAAA,EAAAA,UAASzB,GAA/C,eAAO+B,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACHjC,IAEL0B,EAAU,OAEV5B,EAAAA,EAAAA,GAAW,eAAgBE,GACxBkC,MAAK,SAAA3B,GACJmB,EAAUnB,EAAK4B,SACfP,EAAcrB,EAAK6B,eACnBN,GAAe,EAChB,IACAO,MAAMC,QAAQC,KAClB,GAAE,CAACvC,IAaJ,OACE,iCACE,kBAAMY,UAAW4B,EAAAA,KAAUC,SATV,SAAAC,GACnBA,EAAMC,iBACN,IACMC,EADOF,EAAMG,OACU7C,MAAM8C,MAAMC,cAAcC,OACvDzB,EAAgB,CAAEvB,MAAO4C,GAC1B,EAIG,WACE,kBACEK,KAAK,OACLhC,KAAK,QACLL,UAAW4B,EAAAA,MACXM,MAAOf,EACPmB,SAnBY,SAAAR,GAClBV,EAAeU,EAAMS,cAAcL,MACpC,EAkBOM,YAAY,sBAEd,mBAAQH,KAAK,SAASrC,UAAW4B,EAAAA,OAAjC,UACE,iBAAM5B,UAAW4B,EAAAA,YAAjB,0BAGHX,IAAe,SAAC,IAAD,IACfrB,IAAU,SAAC6C,EAAA,EAAD,CAAW7C,OAAQA,IACd,IAAfmB,IAAoB,gDAG1B,C","sources":["api/api.js","webpack://react-homework-template/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchMovie = async (path, query, page) => {\n  const response = await axios.get(`https://api.themoviedb.org/3/${path}`, {\n    method: 'get',\n    params: {\n      api_key: 'c69fb8daa91af9db5bc79adaff004050',\n      query: query,\n      page: page,\n    },\n  });\n\n  return response.data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__yjDCC\",\"title\":\"MovieList_title__QyMtJ\",\"item\":\"MovieList_item__tDivI\",\"link\":\"MovieList_link__+cn-g\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport style from './MovieList.module.css';\n\nconst MovieList = ({ movies, titlePage }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {titlePage && <h1 className={style.title}>{titlePage}</h1>}\n      <ul className={style.list}>\n        {movies.map(({ id, title, name }) => (\n          <li key={id} className={style.item}>\n            <Link\n              to={`/movies/${id}`}\n              state={{ from: location }}\n              className={style.link}\n            >\n              {title || name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    }).isRequired\n  ),\n  titlePage: PropTypes.string,\n};\n\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\",\"input\":\"Movies_input__KrUqs\",\"submit\":\"Movies_submit__Nxgt8\",\"button\":\"Movies_button__GcIka\"};","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovie } from '../../api/api';\nimport { Loader } from '../../components/Loading/Loading';\nimport MovieList from 'components/MovieList/MovieList';\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const [movies, setMovies] = useState(null);\n  const [totalMovie, setTotalMovie] = useState(null);\n  const [showLoading, setShowLoading] = useState(false);\n  const [inputSearch, setInputSearch] = useState(query);\n\n  useEffect(() => {\n    if (!query) return;\n\n    setMovies(null);\n\n    fetchMovie(`search/movie`, query)\n      .then(data => {\n        setMovies(data.results);\n        setTotalMovie(data.total_results);\n        setShowLoading(false);\n      })\n      .catch(console.log);\n  }, [query]);\n\n  const handleInput = event => {\n    setInputSearch(event.currentTarget.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const queryNormalized = form.query.value.toLowerCase().trim();\n    setSearchParams({ query: queryNormalized });\n  };\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          className={css.input}\n          value={inputSearch}\n          onChange={handleInput}\n          placeholder=\"Enter movie name\"\n        />\n        <button type=\"submit\" className={css.button}>\n          <span className={css.buttonLabel}> Search</span>\n        </button>\n      </form>\n      {showLoading && <Loader />}\n      {movies && <MovieList movies={movies} />}\n      {totalMovie === 0 && <div>Not found movies</div>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["fetchMovie","path","query","page","axios","method","params","api_key","response","data","movies","titlePage","location","useLocation","className","style","map","id","title","name","to","state","from","useSearchParams","searchParams","setSearchParams","get","useState","setMovies","totalMovie","setTotalMovie","showLoading","setShowLoading","inputSearch","setInputSearch","useEffect","then","results","total_results","catch","console","log","css","onSubmit","event","preventDefault","queryNormalized","target","value","toLowerCase","trim","type","onChange","currentTarget","placeholder","MovieList"],"sourceRoot":""}